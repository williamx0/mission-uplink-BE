Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missionuplink.admindashboard.service;\n\nimport com.missionuplink.admindashboard.payload.LoginDto;\nimport com.missionuplink.admindashboard.payload.RegisterDto;\n\npublic interface AuthService {\n    String login(LoginDto loginDto);\n\n    String register(RegisterDto registerDto);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/AuthService.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/AuthService.java
--- a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/AuthService.java	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/AuthService.java	(date 1689827377414)
@@ -1,11 +1,22 @@
 package com.missionuplink.admindashboard.service;
 
+import com.missionuplink.admindashboard.model.entity.AppUser;
 import com.missionuplink.admindashboard.payload.LoginDto;
 import com.missionuplink.admindashboard.payload.RegisterDto;
+import java.util.Optional;
 
 public interface AuthService {
     String login(LoginDto loginDto);
 
     String register(RegisterDto registerDto);
 
+    Optional<AppUser> findUserByEmail(String email);
+
+    void createPasswordResetTokenForUser(String token, AppUser appUser);
+
+    String validatePasswordResetToken(String token);
+
+    AppUser findUserByPasswordResetToken(String token);
+
+    void resetUserPassword(AppUser appUser, String newPassword);
 }
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/AuthServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missionuplink.admindashboard.service.impl;\n\nimport com.missionuplink.admindashboard.exception.AuthApiException;\nimport com.missionuplink.admindashboard.model.entity.AppUser;\nimport com.missionuplink.admindashboard.payload.LoginDto;\nimport com.missionuplink.admindashboard.payload.RegisterDto;\nimport com.missionuplink.admindashboard.repository.AppUserRepository;\nimport com.missionuplink.admindashboard.security.JwtTokenProvider;\nimport com.missionuplink.admindashboard.service.AuthService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AuthServiceImpl implements AuthService {\n\n    private AuthenticationManager authenticationManager;\n    private AppUserRepository appUserRepository;\n    private PasswordEncoder passwordEncoder;\n    private JwtTokenProvider jwtTokenProvider;\n\n\n    @Autowired\n    public AuthServiceImpl(AuthenticationManager authenticationManager,\n                           AppUserRepository appUserRepository,\n                           PasswordEncoder passwordEncoder,\n                           JwtTokenProvider jwtTokenProvider) {\n        this.authenticationManager = authenticationManager;\n        this.appUserRepository = appUserRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.jwtTokenProvider = jwtTokenProvider;\n    }\n\n    @Override\n    public String login(LoginDto loginDto) {\n\n        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(\n                loginDto.getEmail(), loginDto.getPassword()\n        ));\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        String token = jwtTokenProvider.generateToken(authentication);\n        //return \"User Logged-in successful!\";\n        return token;\n    }\n\n    @Override\n    public String register(RegisterDto registerDto) {\n\n        // check for email exists in database\n        if(appUserRepository.existsByEmail(registerDto.getEmail())){\n            throw new AuthApiException(HttpStatus.BAD_REQUEST, \"Email already exists!\");\n        }\n\n        AppUser appUser = new AppUser();\n\n        appUser.setEmail(registerDto.getEmail());\n        appUser.setPassword(passwordEncoder.encode(registerDto.getPassword()));\n\n        appUser.setFirstName(registerDto.getFirstName());\n        appUser.setLastName(registerDto.getLastName());\n        appUser.setEnabled(true);\n        appUser.setLocked(false);\n        appUser.setAppUserRole(registerDto.getAppUserRole());\n\n        appUserRepository.save(appUser);\n\n        return \"User registered successfully!\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/AuthServiceImpl.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/AuthServiceImpl.java
--- a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/AuthServiceImpl.java	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/AuthServiceImpl.java	(date 1689827443653)
@@ -7,6 +7,9 @@
 import com.missionuplink.admindashboard.repository.AppUserRepository;
 import com.missionuplink.admindashboard.security.JwtTokenProvider;
 import com.missionuplink.admindashboard.service.AuthService;
+import com.missionuplink.admindashboard.service.PasswordResetTokenService;
+import java.util.Optional;
+import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.security.authentication.AuthenticationManager;
@@ -17,23 +20,27 @@
 import org.springframework.stereotype.Service;
 
 @Service
+@RequiredArgsConstructor
 public class AuthServiceImpl implements AuthService {
 
     private AuthenticationManager authenticationManager;
     private AppUserRepository appUserRepository;
     private PasswordEncoder passwordEncoder;
     private JwtTokenProvider jwtTokenProvider;
+    private final PasswordResetTokenService passwordResetTokenService;
 
 
     @Autowired
     public AuthServiceImpl(AuthenticationManager authenticationManager,
                            AppUserRepository appUserRepository,
                            PasswordEncoder passwordEncoder,
-                           JwtTokenProvider jwtTokenProvider) {
+                           JwtTokenProvider jwtTokenProvider,
+            PasswordResetTokenService passwordResetTokenService) {
         this.authenticationManager = authenticationManager;
         this.appUserRepository = appUserRepository;
         this.passwordEncoder = passwordEncoder;
         this.jwtTokenProvider = jwtTokenProvider;
+        this.passwordResetTokenService = passwordResetTokenService;
     }
 
     @Override
@@ -73,4 +80,31 @@
 
         return "User registered successfully!";
     }
+
+    @Override
+    public Optional<AppUser> findUserByEmail(String email) {
+        return appUserRepository.findByEmail(email);
+    }
+
+    @Override
+    public void createPasswordResetTokenForUser(String token, AppUser appUser) {
+        passwordResetTokenService.createPasswordResetTokenForUser(token, appUser);
+    }
+
+    @Override
+    public String validatePasswordResetToken(String token) {
+        return passwordResetTokenService.validatePasswordResetToken(token);
+    }
+
+    @Override
+    public AppUser findUserByPasswordResetToken(String token) {
+        return passwordResetTokenService.findAppUserByPasswordResetToken(token).get() ;
+    }
+
+    @Override
+    public void resetUserPassword(AppUser appUser, String newPassword) {
+        appUser.setPassword(passwordEncoder.encode(newPassword));
+        appUserRepository.save(appUser);
+    }
+
 }
Index: admin-dashboard/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/postgres?useSSL=false\n    username: postgres\n    password: qwer1234\n\n  jpa:\n    hibernate:\n      ddl-auto: update\n    database: postgresql\n    database-platform: org.hibernate.dialect.PostgreSQLDialect\n\n# configure JWT Authentication\napp:\n  jwt-secret: c745847391611f54a9066b36ff028db06a6b1ff390d8ca6dc3b698dd958d26d7\n  jwt-expiration-milliseconds: 604800000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/resources/application.yml b/admin-dashboard/src/main/resources/application.yml
--- a/admin-dashboard/src/main/resources/application.yml	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/src/main/resources/application.yml	(date 1689827891517)
@@ -2,7 +2,7 @@
   datasource:
     url: jdbc:postgresql://localhost:5432/postgres?useSSL=false
     username: postgres
-    password: qwer1234
+    password: 2002-02-01
 
   jpa:
     hibernate:
@@ -10,6 +10,18 @@
     database: postgresql
     database-platform: org.hibernate.dialect.PostgreSQLDialect
 
+  mail:
+    host: smtp.gmail.com
+    port: 587
+    username: yz2568@cornell.edu
+    password: usnndzxhowxacxrx
+    properties:
+      mail:
+        smtp:
+          auth: true
+          starttls:
+            enable: true
+
 # configure JWT Authentication
 app:
   jwt-secret: c745847391611f54a9066b36ff028db06a6b1ff390d8ca6dc3b698dd958d26d7
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missionuplink.admindashboard.controller;\n\nimport com.missionuplink.admindashboard.payload.JWTAuthResponse;\nimport com.missionuplink.admindashboard.payload.LoginDto;\nimport com.missionuplink.admindashboard.payload.RegisterDto;\nimport com.missionuplink.admindashboard.service.AuthService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private AuthService authService;\n\n    @Autowired\n    public AuthController(AuthService authService) {\n        this.authService = authService;\n    }\n\n    // Login/Signin REST API\n    // url: \"/api/auth/login\" or \"/api/auth/signin\"\n    @PostMapping(value = {\"/login\", \"/signin\"})\n    public ResponseEntity<JWTAuthResponse> login(@RequestBody LoginDto loginDto){\n        String token = authService.login(loginDto);\n\n        JWTAuthResponse jwtAuthResponse = new JWTAuthResponse();\n        jwtAuthResponse.setAccessToken(token);\n\n        return ResponseEntity.ok(jwtAuthResponse);\n    }\n\n    // Register/Signup REST API\n    // url: \"/api/auth/register\" or \"/api/auth/signup\"\n    // currently specify the appUserRole field as \"USER\" or \"ADMIN\"\n    @PostMapping(value = {\"/register\", \"/signup\"})\n    public ResponseEntity<String> register(@RequestBody RegisterDto registerDto){\n        String response = authService.register(registerDto);\n        return new ResponseEntity<>(response, HttpStatus.CREATED);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/AuthController.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/AuthController.java
--- a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/AuthController.java	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/AuthController.java	(date 1689830252318)
@@ -1,26 +1,39 @@
 package com.missionuplink.admindashboard.controller;
 
+import com.missionuplink.admindashboard.model.entity.AppUser;
+import com.missionuplink.admindashboard.payload.EmailDto;
 import com.missionuplink.admindashboard.payload.JWTAuthResponse;
 import com.missionuplink.admindashboard.payload.LoginDto;
+import com.missionuplink.admindashboard.payload.PasswordResetDto;
 import com.missionuplink.admindashboard.payload.RegisterDto;
 import com.missionuplink.admindashboard.service.AuthService;
+import jakarta.servlet.http.HttpServletRequest;
+import java.util.Optional;
+import java.util.UUID;
+// import javax.servlet.http.HttpServletRequest;
+import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
 @RequestMapping("/api/auth")
+@RequiredArgsConstructor
 public class AuthController {
 
     private AuthService authService;
 
+    private final EmailController emailController;
+
     @Autowired
-    public AuthController(AuthService authService) {
+    public AuthController(AuthService authService, EmailController emailController) {
         this.authService = authService;
+        this.emailController = emailController;
     }
 
     // Login/Signin REST API
@@ -43,4 +56,72 @@
         String response = authService.register(registerDto);
         return new ResponseEntity<>(response, HttpStatus.CREATED);
     }
+
+    /**
+     * This function is called when user clicks on the "forget password" button.
+     * It generates the url that the reset password request will be sent to.
+     * It also sends an email that includes that url to the user.
+     * @param passwordResetDto
+     * @param request
+     * @return the url that the reset password request will be sent to
+     */
+    @PostMapping("/password-reset-request")
+    public String resetPasswordRequest(
+            @RequestBody PasswordResetDto passwordResetDto,
+            final HttpServletRequest request
+    ) {
+        Optional<AppUser> appUser = authService.findUserByEmail(passwordResetDto.getEmail());
+        String passwordResetURL  = "";
+        if (appUser.isPresent()) {
+            String token = UUID.randomUUID().toString();
+            authService.createPasswordResetTokenForUser(token, appUser.get());
+            passwordResetURL = passwordResetEmailLink(appUser.get(), applicationURL(request), token);
+        }
+        return passwordResetURL;
+    }
+
+    /**
+     * Helper function that sends the email for the function above
+     * @param appUser
+     * @param applicationURL
+     * @param token
+     * @return the url that the reset password request will be sent to
+     */
+    private String passwordResetEmailLink(AppUser appUser, String applicationURL, String token) {
+        String url = applicationURL + "api/auth/reset-password?token=" + token;
+        EmailDto emailDto = new EmailDto(appUser.getEmail(), "Reset Password Link", url);
+        emailController.sendForgetPasswordEmail(emailDto);
+        return url;
+    }
+
+    /**
+     * Helper function that generates the first have of the url
+     * For example, "http://localhost:8080/"
+     * @param request
+     * @return the url that the reset password request will be sent to
+     */
+    public String applicationURL(HttpServletRequest request) {
+        return "http://" + request.getServerName() + ":" + request.getServerPort() + "/" + request.getContextPath();
+    }
+
+    /**
+     * This function is where the password is actually reset.
+     * @param passwordResetDto
+     * @param token
+     * @return a string that states whether the password reset is successful.
+     */
+    @PostMapping("/reset-password")
+    public String resetPassword(
+            @RequestBody PasswordResetDto passwordResetDto,
+            @RequestParam("token") String token){
+        String tokenValidateResult = authService.validatePasswordResetToken(token);
+
+        if (!tokenValidateResult.equalsIgnoreCase("valid")) return "Invalid password reset token";
+
+        AppUser appUser = authService.findUserByPasswordResetToken(token);
+        if (appUser == null) return "invalid password reset token";
+
+        authService.resetUserPassword(appUser, passwordResetDto.getNewPassword());
+        return "Password has been reset successfully";
+    }
 }
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/EmailDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/EmailDto.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/EmailDto.java
new file mode 100644
--- /dev/null	(date 1689727128259)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/EmailDto.java	(date 1689727128259)
@@ -0,0 +1,17 @@
+package com.missionuplink.admindashboard.payload;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+
+public class EmailDto {
+    String to;
+    String subject;
+    String body;
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/EmailService.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/EmailService.java
new file mode 100644
--- /dev/null	(date 1689727545166)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/EmailService.java	(date 1689727545166)
@@ -0,0 +1,9 @@
+package com.missionuplink.admindashboard.service;
+
+import com.missionuplink.admindashboard.payload.EmailDto;
+
+public interface EmailService {
+    void sendTestEmail(EmailDto emailDto);
+
+    void sendForgetPasswordEmail(EmailDto emailDto);
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/EmailServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/EmailServiceImpl.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/EmailServiceImpl.java
new file mode 100644
--- /dev/null	(date 1689727545171)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/EmailServiceImpl.java	(date 1689727545171)
@@ -0,0 +1,42 @@
+package com.missionuplink.admindashboard.service.impl;
+
+import com.missionuplink.admindashboard.payload.EmailDto;
+import com.missionuplink.admindashboard.service.EmailService;
+import lombok.AllArgsConstructor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.mail.SimpleMailMessage;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.stereotype.Service;
+
+@Service
+@AllArgsConstructor
+public class EmailServiceImpl implements EmailService {
+
+    private final static Logger LOGGER = LoggerFactory
+            .getLogger(EmailService.class);
+
+    @Autowired
+    private final JavaMailSender mailSender;
+
+    @Override
+    public void sendTestEmail(EmailDto emailDto) {
+        SimpleMailMessage message = new SimpleMailMessage();
+        message.setFrom("yz2568@cornell.edu");
+        message.setTo(emailDto.getTo());
+        message.setSubject(emailDto.getSubject());
+        message.setText(emailDto.getBody());
+        mailSender.send(message);
+    }
+
+    @Override
+    public void sendForgetPasswordEmail(EmailDto emailDto) {
+        SimpleMailMessage message = new SimpleMailMessage();
+        message.setFrom("yz2568@cornell.edu");
+        message.setTo(emailDto.getTo());
+        message.setSubject(emailDto.getSubject());
+        message.setText(emailDto.getBody());
+        mailSender.send(message);
+    }
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/EmailController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/EmailController.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/EmailController.java
new file mode 100644
--- /dev/null	(date 1689727751989)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/controller/EmailController.java	(date 1689727751989)
@@ -0,0 +1,38 @@
+package com.missionuplink.admindashboard.controller;
+
+import com.missionuplink.admindashboard.model.entity.AppUser;
+import com.missionuplink.admindashboard.payload.EmailDto;
+import com.missionuplink.admindashboard.service.EmailService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+import lombok.AllArgsConstructor;
+
+@RestController
+@RequestMapping(path = "/send-email")
+@AllArgsConstructor
+public class EmailController {
+
+    @Autowired
+    private EmailService emailService;
+
+    @PostMapping("/test")
+    public ResponseEntity<String> sendTestEmail(@RequestBody EmailDto request) {
+        emailService.sendTestEmail(request);
+        return new ResponseEntity<>("Email sent successfully", HttpStatus.OK);
+    }
+
+    @PostMapping("/forget-password")
+    public ResponseEntity<String> sendForgetPasswordEmail(@RequestBody EmailDto request) {
+        emailService.sendForgetPasswordEmail(request);
+        return new ResponseEntity<>("Email sent successfully to " + request.getTo(), HttpStatus.OK);
+    }
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/repository/PasswordResetTokenRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/repository/PasswordResetTokenRepository.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/repository/PasswordResetTokenRepository.java
new file mode 100644
--- /dev/null	(date 1689730954517)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/repository/PasswordResetTokenRepository.java	(date 1689730954517)
@@ -0,0 +1,8 @@
+package com.missionuplink.admindashboard.repository;
+
+import com.missionuplink.admindashboard.model.entity.PasswordResetToken;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, Long> {
+    PasswordResetToken findByToken(String token);
+}
Index: admin-dashboard/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.0.4</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.mission-uplink</groupId>\n\t<artifactId>admin-dashboard</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>admin-dashboard</name>\n\t<description>endpoints, security and dashboard for the admin</description>\n\t<properties>\n\t\t<java.version>17</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency> \n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n    \t\t<groupId>javax.servlet</groupId>\n    \t\t<artifactId>javax.servlet-api</artifactId>\n    \t\t<version>3.1.0</version>\n    \t\t<scope>provided</scope>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl -->\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-impl</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api -->\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-api</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson -->\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-jackson</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<excludes>\n\t\t\t\t\t\t<exclude>\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\n\t\t\t\t\t\t</exclude>\n\t\t\t\t\t</excludes>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/pom.xml b/admin-dashboard/pom.xml
--- a/admin-dashboard/pom.xml	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/pom.xml	(date 1689824906712)
@@ -48,11 +48,12 @@
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
 		</dependency>
+		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
 		<dependency>
-    		<groupId>javax.servlet</groupId>
-    		<artifactId>javax.servlet-api</artifactId>
-    		<version>3.1.0</version>
-    		<scope>provided</scope>
+			<groupId>javax.servlet</groupId>
+			<artifactId>javax.servlet-api</artifactId>
+			<version>3.1.0</version>
+			<scope>provided</scope>
 		</dependency>
 		<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl -->
 		<dependency>
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/PasswordResetDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/PasswordResetDto.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/PasswordResetDto.java
new file mode 100644
--- /dev/null	(date 1689730004259)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/payload/PasswordResetDto.java	(date 1689730004259)
@@ -0,0 +1,10 @@
+package com.missionuplink.admindashboard.payload;
+
+import lombok.Data;
+
+@Data
+public class PasswordResetDto {
+    private String email;
+    private String newPassword;
+    private String confirmPassword;
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/model/entity/PasswordResetToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/model/entity/PasswordResetToken.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/model/entity/PasswordResetToken.java
new file mode 100644
--- /dev/null	(date 1689827834614)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/model/entity/PasswordResetToken.java	(date 1689827834614)
@@ -0,0 +1,69 @@
+package com.missionuplink.admindashboard.model.entity;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.JoinColumn;
+import jakarta.persistence.OneToOne;
+import jakarta.persistence.SequenceGenerator;
+import jakarta.persistence.Table;
+import java.util.Calendar;
+import java.util.Date;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Setter
+@Getter
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "Reset Password Token")
+public class PasswordResetToken {
+    @SequenceGenerator(
+            name = "reset_password_token_sequence",
+            sequenceName = "reset_password_token_sequence",
+            allocationSize = 1
+    )
+    @Id
+    @GeneratedValue(
+            strategy = GenerationType.SEQUENCE,
+            generator = "reset_password_token_sequence"
+    )
+    private Long token_id;
+
+    private String token;
+    private Date expirationTime;
+    private static final int EXPIRATION_TIME = 5; // Token is valid for 5 minutes
+
+    @OneToOne
+    @JoinColumn(name = "user_id")
+    private AppUser appUser;
+
+    public PasswordResetToken(String token, AppUser appUser) {
+        super();
+        this.token = token;
+        this.appUser = appUser;
+        this.expirationTime = this.getTokenExpirationTime();
+    }
+
+    public PasswordResetToken(String token) {
+        super();
+        this.token = token;
+         this.expirationTime = this.getTokenExpirationTime();
+    }
+
+    /**
+     * Calculate the time that the newly generated token will be expired
+     * Currently the expiration time is 5 minutes
+     * @return a Date object that indicates the time that the token will be expired
+     */
+    public Date getTokenExpirationTime() {
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(new Date().getTime());
+        calendar.add(Calendar.MINUTE, EXPIRATION_TIME);
+        return new Date(calendar.getTime().getTime());
+    }
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missionuplink.admindashboard.config;\n\nimport com.missionuplink.admindashboard.security.JwtAuthenticationEntryPoint;\nimport com.missionuplink.admindashboard.security.JwtAuthenticationFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@Configuration\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    private UserDetailsService userDetailsService;\n\n    //JWT Auth part\n    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;\n\n    private JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    public SecurityConfig(UserDetailsService userDetailsService,\n                          JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,\n                          JwtAuthenticationFilter jwtAuthenticationFilter) {\n        this.userDetailsService = userDetailsService;\n        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\n    }\n\n    @Bean\n    public static PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {\n        return configuration.getAuthenticationManager();\n    }\n\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.csrf().disable()\n                //GET request to any API endpoints of \"/api/test/reflect\" does not need authentication\n                //change it based on your need\n                .authorizeHttpRequests(authorize ->\n                        //authorize.anyRequest().authenticated()\n                        authorize.requestMatchers(HttpMethod.GET, \"/api/test/reflect\").permitAll().\n                        requestMatchers( \"/api/auth/**\").permitAll()\n                                .anyRequest().authenticated()\n\n                ).exceptionHandling(exception -> exception\n                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)\n                ).sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                );\n//                .httpBasic(Customizer.withDefaults());\n\n        // add JWT filter before other filters\n        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n//    @Bean\n//    //test in memory Http Basic Auth\n//    //test the @EnableMethodSecurity based on roles for different endpoint\n//    public UserDetailsService userDetailsService() {\n//        UserDetails mission_uplink = User.builder()\n//                .username(\"mission_uplink\")\n//                .password(passwordEncoder().encode(\"mission_uplink\"))\n//                .roles(\"USER\")\n//                .build();\n//\n//        UserDetails admin = User.builder()\n//                .username(\"admin\")\n//                .password(passwordEncoder().encode(\"admin\"))\n//                .roles(\"ADMIN\")\n//                .build();\n//\n//        return new InMemoryUserDetailsManager(mission_uplink, admin);\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/config/SecurityConfig.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/config/SecurityConfig.java
--- a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/config/SecurityConfig.java	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/config/SecurityConfig.java	(date 1689825270238)
@@ -56,7 +56,7 @@
                 //change it based on your need
                 .authorizeHttpRequests(authorize ->
                         //authorize.anyRequest().authenticated()
-                        authorize.requestMatchers(HttpMethod.GET, "/api/test/reflect").permitAll().
+                        authorize.requestMatchers(HttpMethod.GET, "/api/test/**").permitAll().
                         requestMatchers( "/api/auth/**").permitAll()
                                 .anyRequest().authenticated()
 
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/PasswordResetTokenServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/PasswordResetTokenServiceImpl.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/PasswordResetTokenServiceImpl.java
new file mode 100644
--- /dev/null	(date 1689731487295)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/impl/PasswordResetTokenServiceImpl.java	(date 1689731487295)
@@ -0,0 +1,42 @@
+package com.missionuplink.admindashboard.service.impl;
+
+import com.missionuplink.admindashboard.model.entity.AppUser;
+import com.missionuplink.admindashboard.model.entity.PasswordResetToken;
+import com.missionuplink.admindashboard.repository.PasswordResetTokenRepository;
+import com.missionuplink.admindashboard.service.PasswordResetTokenService;
+import java.util.Calendar;
+import java.util.Optional;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+@Service
+@RequiredArgsConstructor
+public class PasswordResetTokenServiceImpl implements PasswordResetTokenService {
+
+    private final PasswordResetTokenRepository passwordResetTokenRepository;
+
+    @Override
+    public void createPasswordResetTokenForUser(String token, AppUser appUser) {
+        PasswordResetToken passwordResetToken = new PasswordResetToken(token, appUser);
+        passwordResetTokenRepository.save(passwordResetToken);
+    }
+
+    @Override
+    public String validatePasswordResetToken(String token) {
+        PasswordResetToken passwordResetToken = passwordResetTokenRepository.findByToken(token);
+        if (passwordResetToken == null) return "Invalid password reset token";
+
+        AppUser appUser = passwordResetToken.getAppUser();
+        Calendar calendar = Calendar.getInstance();
+
+        if (passwordResetToken.getExpirationTime().getTime() - calendar.getTime().getTime() <= 0)
+            return "Password reset link has already expired, resend link";
+
+        return "valid";
+    }
+
+    @Override
+    public Optional<AppUser> findAppUserByPasswordResetToken(String token) {
+        return Optional.ofNullable(passwordResetTokenRepository.findByToken(token).getAppUser());
+    }
+}
Index: admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/PasswordResetTokenService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/PasswordResetTokenService.java b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/PasswordResetTokenService.java
new file mode 100644
--- /dev/null	(date 1689731382120)
+++ b/admin-dashboard/src/main/java/com/missionuplink/admindashboard/service/PasswordResetTokenService.java	(date 1689731382120)
@@ -0,0 +1,12 @@
+package com.missionuplink.admindashboard.service;
+
+import com.missionuplink.admindashboard.model.entity.AppUser;
+import java.util.Optional;
+
+public interface PasswordResetTokenService {
+    void createPasswordResetTokenForUser(String token, AppUser appUser);
+
+    String validatePasswordResetToken(String token);
+
+    Optional<AppUser> findAppUserByPasswordResetToken(String token);
+}
Index: admin-dashboard/target/classes/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/postgres?useSSL=false\n    username: postgres\n    password: qwer1234\n\n  jpa:\n    hibernate:\n      ddl-auto: update\n    database: postgresql\n    database-platform: org.hibernate.dialect.PostgreSQLDialect\n\n# configure JWT Authentication\napp:\n  jwt-secret: c745847391611f54a9066b36ff028db06a6b1ff390d8ca6dc3b698dd958d26d7\n  jwt-expiration-milliseconds: 604800000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin-dashboard/target/classes/application.yml b/admin-dashboard/target/classes/application.yml
--- a/admin-dashboard/target/classes/application.yml	(revision b7a4e0367e41ce1a03c4aa4a1cd3954823b973fa)
+++ b/admin-dashboard/target/classes/application.yml	(date 1689827891582)
@@ -2,7 +2,7 @@
   datasource:
     url: jdbc:postgresql://localhost:5432/postgres?useSSL=false
     username: postgres
-    password: qwer1234
+    password: 2002-02-01
 
   jpa:
     hibernate:
@@ -10,6 +10,18 @@
     database: postgresql
     database-platform: org.hibernate.dialect.PostgreSQLDialect
 
+  mail:
+    host: smtp.gmail.com
+    port: 587
+    username: yz2568@cornell.edu
+    password: usnndzxhowxacxrx
+    properties:
+      mail:
+        smtp:
+          auth: true
+          starttls:
+            enable: true
+
 # configure JWT Authentication
 app:
   jwt-secret: c745847391611f54a9066b36ff028db06a6b1ff390d8ca6dc3b698dd958d26d7
